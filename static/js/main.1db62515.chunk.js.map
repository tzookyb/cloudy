{"version":3,"sources":["serviceWorker.js","reportWebVitals.js","services/weatherService.js","store.js","cmps/weather/TempToggle.jsx","cmps/Header.jsx","cmps/TimeDate.jsx","assets/svg/react-original.svg","assets/svg/mobx.svg","assets/svg/sass-original.svg","cmps/About.jsx","cmps/weather/LocationModeSelector.jsx","cmps/weather/Suggestions.jsx","cmps/weather/Location.jsx","cmps/weather/Current.jsx","cmps/weather/Forecast.jsx","cmps/weather/WeatherInfo.jsx","cmps/Weather.jsx","assets/svg/github-original.svg","assets/svg/linkedin-original.svg","cmps/Footer.jsx","App.jsx","index.js","assets/img/logo.png"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","API_KEY","BASE_URL","weatherService","getLocation","getSuggestions","getForecast","coords","a","lat","lng","httpService","name","searchTerm","query","api","axios","res","data","store","makeAutoObservable","isMetric","locationMode","weatherMode","locationCoords","weatherInfo","autorun","runInAction","TempToggle","observer","useContext","StoreContext","className","type","onChange","checked","Header","useState","isOpen","setIsOpen","history","useHistory","routeTo","route","push","onClick","src","require","default","alt","toggled","toggle","rounded","TimeDate","intervalId","React","useRef","clock","useLocalObservable","now","dayjs","this","format","hour","useEffect","current","setInterval","clearInterval","Fragment","greet","date","time","to","About","reactSvg","mobx","sassSvg","LocationModeSelector","setMode","action","mode","txt","map","button","idx","Suggestions","places","pickLocation","isSearching","setSearchTerm","length","place","Location","setIsSearching","suggestions","setSuggestions","inputRef","isMyLocation","debouncedSearch","geolocation","getCurrentPosition","position","latitude","longitude","code","alert","focus","_","debounce","value","ref","placeholder","ev","target","disabled","size","lon","Current","localTime","localtime","split","splice","lastUpdated","last_updated","temp","temp_c","temp_f","feelsLike","feelslike_c","feelslike_f","precip","precip_mm","precip_in","wind","wind_dir","wind_kph","wind_mph","condition","text","icon","humidity","Forecast","forecastday","forecast","forecastDay","day","reverse","join","mintemp_c","maxtemp_c","mintemp_f","maxtemp_f","maxwind_kph","maxwind_mph","daily_chance_of_rain","daily_chance_of_snow","WeatherInfo","Weather","Footer","title","border","github","linkedin","createContext","StoreProvider","children","Provider","App","component","path","clear","ReactDOM","render","StrictMode","document","getElementById","idan"],"mappings":"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","file":"static/js/main.1db62515.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\r\n\r\nconst API_KEY = 'cd3c450c9fe64efe8c8114500201911';\r\nconst BASE_URL = 'https://api.weatherapi.com/v1';\r\n\r\nexport const weatherService = {\r\n    getLocation,\r\n    getSuggestions,\r\n    getForecast,\r\n}\r\n\r\nasync function getLocation(coords) {\r\n    if (!coords) return;\r\n    else coords = `${coords.lat},${coords.lng}`;\r\n    let location = await httpService('search', coords)\r\n    location = location[0].name;\r\n    return location;\r\n}\r\n\r\nasync function getSuggestions(searchTerm) {\r\n    if (!searchTerm) return;\r\n    return await httpService('search', searchTerm);\r\n}\r\n\r\nasync function getForecast(coords) {\r\n    if (!coords) return;\r\n    const query = `${coords.lat},${coords.lng}&days=3`;\r\n    return await httpService('forecast', query);\r\n}\r\n\r\nasync function httpService(api, query) {\r\n    try {\r\n        const res = await axios.get(`${BASE_URL}/${api}.json?key=${API_KEY}&q=${query}`,)\r\n        return res.data;\r\n    } catch (error) {\r\n        console.error(`Had trouble getting to: ${api},\\nwith query: ${query}`);\r\n        console.error(error);\r\n    }\r\n}","import { autorun, makeAutoObservable, runInAction } from \"mobx\"\r\nimport { weatherService } from \"./services/weatherService\";\r\n\r\nexport const store = makeAutoObservable({\r\n    isMetric: true,\r\n    locationMode: null,\r\n    weatherMode: null,\r\n    locationCoords: null,\r\n    weatherInfo: null\r\n})\r\n\r\nautorun(() => {\r\n    if (store.locationCoords) {\r\n        weatherService.getForecast(store.locationCoords)\r\n            .then(res => {\r\n                runInAction(() => store.weatherInfo = res);\r\n            })\r\n    };\r\n})","import React, { useContext } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { StoreContext } from '../../App'\r\nimport { runInAction } from 'mobx'\r\n\r\nexport const TempToggle = observer(() => {\r\n    const store = useContext(StoreContext)\r\n\r\n    const toggleTempMode = () => {\r\n        runInAction(() => store.isMetric = !store.isMetric);\r\n    }\r\n\r\n    return (\r\n        <div className=\"temp-switch flex align-center gap5\" >\r\n            <small>°F</small>\r\n            <label className=\"switch\">\r\n                <input type=\"checkbox\" onChange={toggleTempMode} checked={store.isMetric} />\r\n                <span className=\"slider round\"></span>\r\n            </label>\r\n            <small>°C</small>\r\n        </div >\r\n    )\r\n})\r\n\r\n","import React, { useState } from 'react'\r\nimport { Twirl as Hamburger } from 'hamburger-react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { TempToggle } from './weather/TempToggle';\r\n\r\nexport const Header = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const routeTo = (route) => {\r\n        if (isOpen) setIsOpen(false);\r\n        history.push(route);\r\n    }\r\n\r\n    return (\r\n        <header className={`main-container ${isOpen ? 'open' : ''}`}>\r\n            <div className=\"flex align-center space-between\">\r\n                <div className=\"flex gap5 align-center cursor-pointer\">\r\n                    <img onClick={() => history.push('/')} src={require('../assets/img/logo.png').default} alt=\"logo\" className=\"logo\" />\r\n                    <h1 onClick={() => history.push('/')}>Cloudy</h1>\r\n                    <nav className=\"flex align-center\">\r\n                        <ul className=\"clean-list flex align-center\">\r\n                            <li onClick={() => routeTo('/about')}>About</li>\r\n                            <li onClick={() => routeTo('/weather')}>Weather</li>\r\n                        </ul>\r\n\r\n                    </nav>\r\n                </div>\r\n                <TempToggle />\r\n                <Hamburger\r\n                    className=\"hamburger\"\r\n                    toggled={isOpen}\r\n                    toggle={() => setIsOpen(!isOpen)}\r\n                    rounded\r\n                />\r\n            </div>\r\n            <div onClick={() => setIsOpen(false)} className={`screen ${isOpen ? 'open' : ''}`}></div>\r\n        </header >\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport dayjs from 'dayjs'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer, useLocalObservable } from 'mobx-react-lite'\r\nimport { runInAction } from 'mobx'\r\n\r\nexport const TimeDate = observer(() => {\r\n    const intervalId = React.useRef(null)\r\n    const clock = useLocalObservable(() => ({\r\n        now: dayjs(),\r\n        get time() {\r\n            return this.now.format('HH:mm:ss');\r\n        },\r\n        get date() {\r\n            return this.now.format('dddd D/M/YYYY');\r\n        },\r\n        get hour() {\r\n            return this.now.hour();\r\n        },\r\n        get greet() {\r\n            let greet;\r\n            if (this.hour >= 5 && this.hour < 12) greet = 'Good Morning!';\r\n            else if (this.hour >= 12 && this.hour < 18) greet = 'Good Afternoon!';\r\n            else if (this.hour >= 18 && this.hour < 24) greet = 'Good Evening!';\r\n            else greet = 'Good Night!';\r\n            return greet;\r\n        }\r\n    }))\r\n\r\n    useEffect(() => {\r\n        intervalId.current = setInterval(() => {\r\n            runInAction(() => clock.now = dayjs());\r\n        }, 1000)\r\n        return () => {\r\n            clearInterval(intervalId.current);\r\n        }\r\n        // eslint-disable-next-line \r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"time flex column align-center space-around\">\r\n                <div className=\"flex column space-between\">\r\n                    <h2>{clock.greet}</h2>\r\n                </div>\r\n                <h3>Today is {clock.date}</h3>\r\n                <h3>The time now is: </h3>\r\n                <h3>{clock.time}</h3>\r\n            </div>\r\n            <div className=\"cta-btn flex justify-center\">\r\n                <Link to=\"/weather\">\r\n                    <button>Check Weather</button>\r\n                </Link>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n})","export default __webpack_public_path__ + \"static/media/react-original.7098e271.svg\";","export default __webpack_public_path__ + \"static/media/mobx.b2519d0d.svg\";","export default __webpack_public_path__ + \"static/media/sass-original.8ec16938.svg\";","import React from 'react'\r\nimport reactSvg from '../assets/svg/react-original.svg'\r\nimport mobx from '../assets/svg/mobx.svg'\r\nimport sassSvg from '../assets/svg/sass-original.svg'\r\n\r\nexport const About = () => {\r\n    return (\r\n        <section className=\"main-container\">\r\n            <div className=\"about flex column\">\r\n\r\n                <h1>About</h1>\r\n                <p>This is a weather app I created to experiment with MobX State Management.</p>\r\n                <p>It's main features are:</p>\r\n                <ul>\r\n                    <li>Clock + Date</li>\r\n                    <li>Weather forecast for your geolocation</li>\r\n                    <li>Weather forecast for other locations</li>\r\n                    <li>Information represented in Metric/Imperial system</li>\r\n                </ul>\r\n\r\n                <h4>This app has been coded using these technologies:</h4>\r\n                <div className=\"tech-grid\">\r\n                    <div><img alt=\"react\" src={reactSvg} />React.js</div>\r\n                    <div><img alt=\"mobx\" src={mobx} />MobX</div>\r\n                    <div><img alt=\"sass\" src={sassSvg} />Sass</div>\r\n                </div>\r\n                <h4>Weather information by WeatherAPI.com</h4>\r\n\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { StoreContext } from '../../App'\r\nimport { action } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport const LocationModeSelector = observer(() => {\r\n    const store = useContext(StoreContext);\r\n\r\n    const setMode = action((mode) => {\r\n        if (store.locationMode === mode) return;\r\n        store.weatherInfo = null;\r\n        store.locationMode = mode\r\n    });\r\n\r\n    const buttons = [\r\n        { mode: 'my-location', txt: 'My Location' },\r\n        { mode: 'places', txt: 'Other Places' }\r\n    ]\r\n\r\n    return (\r\n        <div className=\"flex gap10\">\r\n            {buttons.map((button, idx) => (\r\n                <button\r\n                    key={idx}\r\n                    className={`mode-btn ${store.locationMode === button.mode ? 'location-mode-active' : ''}`}\r\n                    onClick={() => setMode(button.mode)}>\r\n                    { button.txt}\r\n                </button>\r\n            ))}\r\n        </div >\r\n    )\r\n})","import React from 'react';\r\n\r\nexport const Suggestions = ({ places, pickLocation, isSearching, setSearchTerm }) => {\r\n\r\n    if (!places.length && !isSearching) return (\r\n        <div className=\"no-results flex column align-center\">\r\n            <h3 className=\"mb5\">No results found...</h3>\r\n            <button onClick={() => setSearchTerm('')}>Clear search</button>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <ul className=\"suggest-list clean-list\">\r\n            {places.map((place, idx) => (\r\n                <li key={idx} className=\"suggest cursor-pointer\" onClick={() => pickLocation(place)}>{place.name}</li>\r\n            ))\r\n            }\r\n        </ul >\r\n    )\r\n}\r\n","import React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport _ from 'lodash';\r\nimport { StoreContext } from '../../App';\r\nimport { weatherService } from '../../services/weatherService';\r\nimport { runInAction } from 'mobx';\r\nimport { Suggestions } from './Suggestions';\r\nimport { WindMillLoading } from 'react-loadingg';\r\n\r\nexport const Location = observer(() => {\r\n    const store = useContext(StoreContext);\r\n    const { locationMode, locationCoords } = store;\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [isSearching, setIsSearching] = useState(false);\r\n    const [suggestions, setSuggestions] = useState([]);\r\n    const inputRef = useRef(null);\r\n    const isMyLocation = locationMode === 'my-location';\r\n\r\n    useEffect(() => {\r\n        debouncedSearch(null);\r\n        setSearchTerm('');\r\n        setIsSearching(false);\r\n        if (locationMode === 'places') {\r\n            inputRef.current.focus()\r\n            return;\r\n        }\r\n        if (isMyLocation) {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition((position) => {\r\n                    const coords = { lat: position.coords.latitude, lng: position.coords.longitude };\r\n                    weatherService.getLocation(coords).then(res => setSearchTerm(res));\r\n                    runInAction(() => store.locationCoords = coords)\r\n                }, async (error) => {\r\n                    if (error.code === 1) alert('Allow Location discovery to use \"My Location\" feature');\r\n                });\r\n            } else alert('Geolocation is not supported by this browser');\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [locationMode])\r\n\r\n    const handleInput = (value) => {\r\n        runInAction(() => {\r\n            store.locationCoords = null\r\n            store.weatherInfo = null\r\n        });\r\n        setSuggestions([]);\r\n        setSearchTerm(value);\r\n        setIsSearching(true);\r\n        debouncedSearch(value);\r\n        if (!value) setIsSearching(false);\r\n    }\r\n\r\n    const pickLocation = (place) => {\r\n        const coords = { lat: place.lat, lng: place.lon };\r\n        runInAction(() => store.locationCoords = coords);\r\n        setSuggestions([]);\r\n        setSearchTerm(place.name);\r\n    }\r\n\r\n    const debouncedSearch = useRef(_.debounce((value) => {\r\n        if (!value) return;\r\n        weatherService.getSuggestions(value)\r\n            .then(res => {\r\n                setSuggestions(res);\r\n                setIsSearching(false);\r\n            })\r\n    }, 1500)).current;\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                ref={inputRef}\r\n                className=\"location\"\r\n                type=\"search\"\r\n                value={searchTerm}\r\n                placeholder={isMyLocation ? 'Getting your location...' : 'Search for Location'}\r\n                onChange={(ev) => handleInput(ev.target.value)}\r\n                disabled={isMyLocation}\r\n            />\r\n            <div>\r\n\r\n                {!isMyLocation && isSearching && <WindMillLoading size=\"large\" className=\"loading\" />}\r\n                {!isMyLocation && !locationCoords && !!searchTerm && <Suggestions isSearching={isSearching} pickLocation={pickLocation} places={suggestions} setSearchTerm={setSearchTerm} />}\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\n\r\nexport default function Current({ current, location, isMetric }) {\r\n\r\n    const localTime = location.localtime.split(' ').splice(1, 1)[0];\r\n    let lastUpdated = (current.last_updated);\r\n    lastUpdated = lastUpdated.split(' ');\r\n    lastUpdated = lastUpdated[1];\r\n    const temp = isMetric ? current.temp_c : current.temp_f;\r\n    const feelsLike = isMetric ? current.feelslike_c : current.feelslike_f;\r\n    const precip = isMetric ? `${current.precip_mm}mm` : `${current.precip_in}in.`;\r\n    const wind = `${current.wind_dir} ${isMetric ? current.wind_kph : current.wind_mph} ${isMetric ? 'kph' : 'mph'}`\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"current-title text-center\">\r\n                <h3>Current Weather:</h3>\r\n                <small className=\"last-update\">&#9;(as of {lastUpdated})</small>\r\n            </div>\r\n            <article className=\"current mb15\">\r\n                <div className=\"local-time\">Local time: {localTime}</div>\r\n                <h2 className=\"condition\">{current.condition.text}</h2>\r\n                <div className=\"condition-img\"><img src={current.condition.icon} alt=\"condition\" /></div>\r\n                <h3 className=\"temp\">Temperature: {temp}°{isMetric ? 'C' : 'F'}</h3>\r\n                <h3 className=\"feels\">Feels Like: {feelsLike}°{isMetric ? 'C' : 'F'}</h3>\r\n                <div className=\"extra-info\">\r\n                    <div className=\"precip\">Precipitation: {precip}</div>\r\n                    <div className=\"humidity\">Humidity: {current.humidity}%</div>\r\n                    <div className=\"wind\">Wind: {wind}</div>\r\n                </div>\r\n            </article>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Forecast({ isMetric, forecast }) {\r\n    const { forecastday } = forecast;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h3 className=\"text-center\">3 Day Forecast:</h3>\r\n            <article className=\"forecast mb15\">\r\n                {forecastday.map(forecastDay => {\r\n                    const { day } = forecastDay\r\n                    const date = forecastDay.date.split('-').reverse().join('/')\r\n                    const temp = isMetric ? `${day.mintemp_c} - ${day.maxtemp_c}°C` : `${day.mintemp_f} - ${day.maxtemp_f}°F`;\r\n                    const wind = isMetric ? day.maxwind_kph + ' kph' : day.maxwind_mph + ' mph';\r\n\r\n                    return <div className=\"forecast-day\" key={forecastDay.date}>\r\n                        <div className=\"date\">{date}</div>\r\n                        <div className=\"condition\">{day.condition.text}</div>\r\n                        <div className=\"condition-img\"><img src={day.condition.icon} alt=\"condition\" /></div>\r\n                        <div className=\"temp\">Temperatures: {temp}</div>\r\n                        <div className=\"wind\">Max wind: {wind}</div>\r\n                        <div className=\"rain\">Rain chance: {day.daily_chance_of_rain}%</div>\r\n                        <div className=\"snow\">Snow chance: {day.daily_chance_of_snow}%</div>\r\n                    </div>\r\n                })}\r\n            </article>\r\n        </React.Fragment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite'\r\nimport React, { useContext } from 'react'\r\nimport { StoreContext } from '../../App'\r\nimport Current from './Current'\r\nimport Forecast from './Forecast'\r\n\r\nexport const WeatherInfo = observer(() => {\r\n    const store = useContext(StoreContext)\r\n    const { weatherInfo, isMetric } = store;\r\n    const { current, forecast, location } = weatherInfo;\r\n\r\n    return (\r\n        <section>\r\n            <Current location={location} current={current} isMetric={isMetric} />\r\n            <Forecast forecast={forecast} isMetric={isMetric} />\r\n        </section >\r\n    )\r\n})","import React, { useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { StoreContext } from '../App';\r\n// CMPS:\r\nimport { LocationModeSelector } from './weather/LocationModeSelector';\r\nimport { Location } from './weather/Location';\r\nimport { WeatherInfo } from './weather/WeatherInfo';\r\n\r\nexport const Weather = observer(() => {\r\n    const store = useContext(StoreContext);\r\n    return (\r\n        <section className=\"weather flex column align-center flex-1\">\r\n            <LocationModeSelector />\r\n            <Location />\r\n            {store.weatherInfo && <WeatherInfo />}\r\n        </section>\r\n    )\r\n})","export default __webpack_public_path__ + \"static/media/github-original.fad4b944.svg\";","export default __webpack_public_path__ + \"static/media/linkedin-original.6494960c.svg\";","import React from 'react'\r\nimport github from '../assets/svg/github-original.svg'\r\nimport linkedin from '../assets/svg/linkedin-original.svg'\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <footer className=\"flex align-center space-between\">\r\n            <div className=\"flex align-center gap5\">\r\n                <a href=\"https://www.weatherapi.com/\" title=\"Free Weather API\"><img src='//cdn.weatherapi.com/v4/images/weatherapi_logo.png' alt=\"Weather data by WeatherAPI.com\" border=\"0\" /></a>\r\n                <div className=\"powered-by\">\r\n                    Powered by <a href=\"https://www.weatherapi.com/\" title=\"Weather API\">WeatherAPI.com</a>\r\n                </div>\r\n            </div>\r\n            <div className=\"copyright flex flex-end gap10\">\r\n                <a href=\"https://github.com/tzookyb\"><img className=\"social\" src={github} title=\"to my github profile\" alt=\"github\" /></a>\r\n                <a href=\"https://www.linkedin.com/in/idanbenjamin\"><img className=\"social\" src={linkedin} title=\"to my linkedin profile\" alt=\"linkedin\" /></a>\r\n                <small>&copy; 2020<br /> Idan Benjamin</small>\r\n            </div>\r\n        </footer>\r\n    )\r\n}","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport { store } from './store'\n// CMPS\nimport { Header } from './cmps/Header'\nimport { TimeDate } from './cmps/TimeDate'\nimport { About } from './cmps/About'\nimport { Weather } from './cmps/Weather'\nimport { Footer } from './cmps/Footer'\n\n// STORE:\nexport const StoreContext = React.createContext();\nconst StoreProvider = ({ children }) => {\n  return <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\n}\n\n// APP:\nexport default function App() {\n  return (\n    <StoreProvider>\n      <div className=\"app flex column\">\n        <Header />\n        <main>\n          <Switch>\n            <Route component={About} path=\"/about\" />\n            <Route component={Weather} path=\"/weather\" />\n            <Route component={TimeDate} path=\"/\" />\n          </Switch>\n        </main>\n        <Footer />\n      </div>\n    </StoreProvider>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/scss/global.scss';\nimport reportWebVitals from './reportWebVitals';\nconsole.clear();\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router >\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.register();\nwindow.idan = (process)","export default __webpack_public_path__ + \"static/media/logo.e50c6087.png\";"],"sourceRoot":""}